1) По сути вся суть заключается в оптимизации при помощи inline, вместо вызова функции мы сразу же вставляем тело функции. Однако такое лучше делать только с короткими функциями
т.к. иначе код скорее всего станет очень громоздким и время компиляции увеличится

2) auto заставляет компилятор сам определить тип переменной для нас, а также помогает не писать очень длинные типы (std::vector<std::vector<Сколько угодно еще векторов>>), очевидно auto намного короче

3) Значения по умолчанию могут иметь элементы из массива аргументов (от конца к началу)

4) перегрузка функции с С++ -это когда мы создаем якобы одинаковые функции (одно и тоже имя, один и тот же тип), и при всем этом компилятор способен различать и вызывать их. Например Pros(int a, int b) --->
a*b и например Pros(int a, int b, int c) ---> a*b*c

5) Чтобы передать функцию в функцию нам нужен std::function. На практике выглядит так:
            type Funkcia(std::function<type()>);
Сохранение лямбда функции:
            auto sohranenie{ [](int a){return (a-1);} };

6)Ссылка - это переменная содержащая адресс объекта в памяти, и при помощи нее можно обратится к ранне упомянутому объекту
Когда мы передаем в функцию значение, то сама переменая не изменится. Однако при передаче ссылки все изменения происходчщие в функции отразятся н переменной.
Массивы приятно передавать по ссылке, т.к. иначе придется явно их задавать
Бывают ссылки-константы это значит, что объект на который указывает ссылка не будет изменятся при передаче в функцию
