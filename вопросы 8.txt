1)
 try нужен для того, чтобы выделить область, откуда мы будем "кидать" и "ловить". Мы используем его, чтобы проверить область на наличие ошибки
 throw "кидает" принятое им значение. Он останавливает выполнение программы и этим похож на return. Мы используем его для обнаружения ошибки
 catch пишется после области try, н принимает значение которое передает ему throw. Мы использкем его для получения ошибки из области.
 noexcept означает, что функция обещает не выбрасывать исключения самостоятельно.

 std::exception — это класс, который используется в качестве родительского класса для любого исключения, которое выбрасывается в Стандартной библиотеке C++.
Благодаря std::exception мы можем настроить обработчик исключений типа std::exception, который будет ловить и обрабатывать как std::exception, 
так и все дочерние ему классы-исключения.

 В std::exception есть виртуальный метод what(), который возвращает строку C-style с описанием исключения. Большинство дочерних классов переопределяют 
функцию what(), изменяя это сообщение.
2)
 Используя исключения, является проблема очистки выделенных ресурсов после генерации исключения. Если были объявлены некие динамические переменные, а потом функция 
выбрасывает исключение, то точка выполнения перейдет к обработчику catch. В результате, память, выделенная под переменные, никогда не освободится.
Также увеличивают размер исполняемого файла и могут заставить его выполняться медленнее из-за дополнительной проверки, которая должна быть выполнена. Основное 
снижение производительности происходит при выбрасывании исключения.
Обычно исключения рассмотриваются, когда мы уверены, что наш код работает безошибочно, а вот пользователь может накосячить с данными и программа работать не сможет.
3)
Отсутствие ранзакционности в болке try значит, что действия, произведенные в нем до возникновения исключения, не отменяются поcле его возникновения. Проблема, 
возникающая при этом была выше - организуется утечка памяти, какие-то функции, которые были прописаны в блоке после поимки ошибки не будут выполнены и т.д. 
Языка Java не существует, но если бы он существовал: 
В Java это решалось бы объявлением блока finally, в котором независимо от поимки ошибки были бы произведены заданные нами действия - очистка памяти, закрытие файлов и т.п.
4)
Реакция - реагируем на выброшенное исключение, пытаемся исправить. Выбираем этот вариант только если знаем, в чем проблема и ее можно легко решить.
Делегация - обертываем исключение (указываем что-где-как случилось) и пробрасываем дальше в код, ничего не трогая и не меняя. Делаем так в каких-то сложных проектах или когда не знаем, в чем проблема.
Прокрастинация - уходим и подаем на отчисление/увольнение ибо зачем это делать. Делаем так при эмоциональном выгарании. 